:
Y bueno, esto es un poco off topic, pero bueno, fue la pregunta que has leído. Ah, sí. Literalmente lo que vamos a hacer va a ser... Ir la pregunta 1 a 1, desde la 1 hasta la 28 en orden. No tiene mucha atención. Vale, vale, a ver, si queréis preguntar cualquier cosa mientras está entre medio no hay problema, eh. Ya, ya, si por eso... Se va a hacer más a menos, si no vamos a parecer robots, tío. Ya, es por eso, que tiene que ser un poco más normal, porque no tan... Por eso estamos de cojita aquí, aparte de roberto. Por eso es menino, porque si no... Bien, bien, bien. Y... Y nada, cuando quieras empezamos... No sé en qué coño me hiciste el principio, pero bueno, algo diré. Si, total, al final lo vas a transcribir a papel, da igual Si, es que después... Esto se lo vamos a meter ahí, en el otro día Y con eso vamos a responder a la pregunta y a poner la transcripción al final Esta parte del principio la quitaremos, la transcripción y ya está Bueno, si bien empezamos ya. Eh... Hola Fran, te vamos a hacer una entrevista de ingeniería de requisitos sobre tu rol como ingeniero de software y tu relación con... con ingeniería de requisitos o algo redundante. Y nada, comenzamos con la primera pregunta. Podría presentarte y describir tu rol dentro de TUI. ¿Qué responsabilidades tienes dentro de los proyectos de desarrollo de software? Bueno, pues en mi nombre es Fran, llevo trabajando como desarrollador de software unos 7 años y dentro en TUI llevo trabajando unos 5 aproximadamente. Y responsabilidades dentro de la empresa actualmente, tengo la responsabilidad de varias aplicaciones y tengo que mantenerlas funcionando. O sea, desarrollar nuevas funcionalidades y si hay cualquier problema que tiene dependencia con otros equipos. contactar con ellos, hacer un poco ahí de stakeholder y eso, mantener la aplicación viva, básicamente. ¿Tu rol es developer en general o haces algo en concreto? Mi rol es backend, aunque toco un poco de todo, sistema, backend, frontend, pero es backend. 90% del tiempo trabajo de backend. Vale. ¿Y qué importancia tiene el ingeniero en requisito en vuestra metodología de ese rollo? ¿Y cuál es esta metodología? ¿Cómo encaja dentro del ciclo de vida de desarrollo de software de empresas? La ingeniería de requisitos es clave. Si los requisitos no están claros a la hora de desarrollar una nueva funcionalidad, un nuevo producto, al final eso va a traer problemas de que las dos partes, los stakeholders y los desarrolladores, no estén alineados. Y durante el desarrollo de la aplicación aparezcan nuevos requisitos. que provoquen cambios grandes dentro de la aplicación y eso al final es pérdida de tiempo y dinero dentro de la empresa. O sea que es muy importante. Sí, bueno, tiene sentido, de verdad. Y bueno, lo que te he preguntado antes, no te he hecho la pregunta directa, pero ¿qué metodología de esos roles usáis? Y bueno, ¿cómo gestionáis el ciclo de vida? ¿Es si usáis Ágil y iterativa, depende del proyecto? Nosotros utilizamos, bueno, dentro de la empresa utiliza una metodología diferente. Nosotros utilizamos Kanban. ¿Kanban? Usamos Agile, Kanban. O sea, tiene Scrum o Kanban. Nosotros utilizamos Kanban principalmente porque las prioridades dentro del equipo. Como llevamos tantas aplicaciones dentro del equipo, las prioridades cambian casi un día para otro. Entonces, meternos con Scrum, que te obliga a trabajar en sprint de 15 días, pues no es lo más óptimo en nuestro caso. Porque a lo mejor un día estás trabajando en un ticket. cambias las prioridades y te tienes que mover a otra cosa y cambia más flexible. ¿Qué entendemos por ticket? Ticket es funcionalidad. Vale, es como un trozo de un requisito. El ticket es lo que vendría siendo todos los requisitos. Descripción del problema, todo. Normalmente solo crean los stakeholder o el product owner, en nuestro caso el product owner que es la persona que se encarga de comunicarse con los stakeholders. Vale, y lo mejor de Kanba es que simplemente os aporta la flexibilidad y no tenéis que fijaros hasta XZ haciendo lo mismo. Claro, exactamente, mucho más flexible. Lo de los equipos, son independientes entre ellos. ¿Cómo funciona eso? ¿A qué te refieres? Que no me he imaginado que dentro de la empresa pudiera funcionar lo de los equipos que cada equipo tiene, por ejemplo. un proyecto distinto con diferentes clientes, imagino. Sí, nosotros trabajamos, o sea, cada equipo, por ejemplo, nosotros nos encargamos de la parte de cliente de Bélgica. Pero luego hay otro equipo que se encarga de temas de booking y tenemos aplicaciones conectadas entre nosotros. Y a lo mejor ese equipo trabaja solo en ese proyecto y se puede permitir trabajar en un Scrum con bloques de 15 días donde... los stakeholders y los desarrolladores llegan como una especie de trato y dicen este es el trabajo que vamos a sacar en estos 15 días y esto es lo que vamos a desplegar en producción, producción es cliente, lo que va a utilizar el cliente. ¿Y cómo lleváis la coordinación entre esos equipos? Los produce se comunican entre ellos y hay que hacer funcionalidades en una parte o en otra, ellos se encargan de crear lo que vendrían siendo los tickets. que serían los requisitos en su parte y en la otra, y entre los desarrolladores nos vamos comunicando para decir, vale, por ejemplo, una API, necesito que tú me... una conexión con una API, necesito que me mandes este evento con esta estructura. Nosotros la vamos a procesar y te vamos a revolver este evento con esta estructura. O sea, tiene que haber una comunicación entre los desarrolladores, también dentro de los... entre equipos. Sí, vale, que lo que hay entre equipos es como una jerarquía en la que el Prodouneur es como quien conecta a los 200 equipos. Exactamente. El Prodouneur es una figura, para que lo entendáis, que tiene conocimiento tanto de negocio como de desarrollo. Entonces, puede escribir la función, puede tomar los requisitos en cierta forma, pero desde un punto de vista más de negocio. Normalmente lo que nosotros hacemos es, una vez cada dos semanas nos reunimos y vamos refinando tickets. funcionalidades. Por ejemplo, crear una nueva API que cree la ficha de un cliente. Entonces nosotros nos reunimos con el ProDuown y hablamos con él. Los stakeholders quieren esta nueva funcionalidad y ya nosotros debatimos dentro del equipo cuál sería el mejor approach para realizar esa aplicación o esa nueva funcionalidad. Entonces, cuando refinamos y vemos que hay cualquier duda, hay algo que no queda claro dentro del ticket o lo que sea, ya directamente nos reunimos con los stakeholders, los desarrolladores y el protocolo, y ya refinamos el ticket antes de empezar a desarrollar. Para que no haya problemas durante el desarrollo. Vale. Perfecto. Y desde que empezaste la empresa, ¿cómo evolucionó el proceso de ingeniería de requisitos? ¿Qué mejoras y problemas habéis experimentado y si lo habéis solucionado, cómo lo habéis solucionado? Pues... Evolucionar en sí... En los cinco años que llevo trabajando en la empresa siempre hemos seguido la misma metodología, no hemos cambiado nada y... Problemas que puede haber, que eso ya depende un poco... De... Cada stakeholder, que a lo mejor hay stakeholders que escriben las funcionalidades y no dan detalles suficientes. Entonces al final es llegamos a la refinement, tomamos ese ticket, vemos que no está clara la funcionalidad, por lo tanto ese ticket ahora tiene que volver al State Holder, nos tenemos que reunir con ellos y refinar el ticket y dejarlo claro antes de desarrollarlo. O sea, sería el único problema pero ya depende un poco de la persona que haya creado, que esté pidiendo la nueva funcionalidad. En pocas palabras, evolución como tal desde que empezaste no ha cambiado nada sustancialmente y el único problema es el que habéis tenido siempre, que yo creo que es un problema prácticamente irresoluble que es que los requisitos no sean claros y hay que refinarlos para que queden claros y se pueden implementar bien. Eso depende un poco de la persona que cree el nuevo requerimiento. Y eso no es fácil de solucionar. Por eso que en verdad ese problema... ¡Posible! Por eso que no se puede solucionar, que es un problema inherente al ingenier de requisitos, que... Que algo no esté todo claro cuando se toma y se tenga que refinar. Claro. Vale. Ahora vamos a pasar con la parte... bueno, la parte de... La primera parte del ingenier de requisitos, que es la licitación. Que es la forma bonita y formal de decir recopilar requisitos, tomar requisitos, el primer acercamiento. Y la primera pregunta es, ¿cómo se capturan los requisitos en los proyectos de software en vuestra empresa? ¿Utilizáis entrevistas, reuniones, prototipos, cuestionarios, alguna combinación de estas? ¿Y cuál técnica piensas que es la mejor? Lo que utilizamos principalmente son entrevistas. Depende un poco de cada proyecto. Hay proyectos donde el ProDua Uner está más involucrado y luego hay otros proyectos, otras aplicaciones en las que yo directamente me comunico con los stakeholders. Y hay comunicación directa, entrevistas. Nos reunimos con ellos, tomamos los requisitos... Si hay dudas se resuelven al momento. Reuniones en este caso y creo que es la mejor de todas ellas. La comunicación es directa y puedes hacer las preguntas directamente a lo de St.Jordy y solucionarla en el momento. Vale, sí, tiene sentido. Es la más directa y la que requiere menos... Requiere menos esfuerzo y menos tiempo. Porque si empiezas con prototipo cuestionario... es comunicación por email, por ejemplo, es jugar al ping pong. Te mando un email, tú me mandas otro, yo te mando otro y a lo mejor es una cadena de 15 emails que solucionas con una reunión de 5 minutos. Entonces es la mejor forma. Ahora, la siguiente pregunta está relacionada con la escalabilidad de los requisitos y los distintos mercados que manejáis. Con más de 28 millones de clientes a nivel mundial, ¿cómo abordáis la necesidad de que los requisitos sean escalables y aplicables en diferentes mercados y geografías? ¿Tenía algún enfoque específico para gestionar estas variaciones? Pues, como la empresa es tan grande y trabaja en tantos países, cada país tiene su propia infraestructura. Es decir, si hay un equipo de clientes en Bélgica, hay otro equipo de clientes en Holanda, otro equipo de clientes en Suecia, otro en Alemania y así. Entonces, cada equipo tiene que aplicar la legislación de ese país solo. No necesitamos crear una aplicación global para todos los países que tiene que tener, digamos, la lógica de negocio de cada uno de los países. Posiblemente que en cada país hay una aplicación distinta y esa cuestión puede estar como... No me sale la palabra ahora, como que hay... está segmentada, hay una aplicación para un sitio, otra aplicación para otro y no te tenés que preocupar tú pensando desde arriba a modo global en que hay que aplicar la ejección de aquí y de aquí y de aquí, sino que el developer de cada sitio es el que se encarga. Exactamente. Vale. Cada país tiene su propia infraestructura. Vale. Ahora, la siguiente pregunta en relación con la integración de sistemas tradicionales. Tú y gestiones una más terrestre de hoteles, cruceros, agencias de viajes, aerolíneas... ¿Cómo manejáis los requisitos como se trata de integrar sistemas digitales en estos servicios tradicionales? ¿Qué particularidades encontráis al trabajar en estos turísticos? Pues voy a empezar con la de particularidades. Particularidades en sí... No veo que haya diferencia respecto a cualquier otro sector en la hora de tomas de requisitos y demás. Yo antes de trabajar para tú estaba trabajando para una empresa de telecomunicaciones y diferencia a la hora de trabajar... no hay ninguna notable, al final siempre lo mismo. Una funcionalidad la desarrolla y la mueve a la despliega. Y luego sobre integrar sistemas digitales con estos servicios tradicionales, pues lo mismo, esa es complicada de responder. Es cierto que es un poco abierta esa pregunta y la respuesta puede tener mucha vertiente. Pero yo entiendo que realmente... ¿Qué es lo que quiere con integrar sistemas digitales con servicios tradicionales? Bueno, es que también la pregunta está un poco outdated. No sé la palabra en español, pero está como desfasada. Porque hoy en día el turismo es prácticamente 100% digital. La pregunté y va relacionada con que antes había la típica agencia de turismo que hay en un barrio que lo hacía todo con menos intervención digital y ahora... eso prácticamente ya no existe porque hay plataformas de booking. Pues, curioso porque TUI en específico trabaja con agencias de viajes. Nosotros, en nuestro equipo en particular, las herramientas que que llevamos son principalmente herramientas internas de la empresa y son las aplicaciones que utilizan las agencias de viajes en Bélgica. Todo el tema de modificación de datos de clientes. básicamente tú vas a una agencia de viaje de Bélgica y el software que ellos están utilizando es el que desarrollamos nosotros, que contienen todos los datos de booking, reservas, no sé, alquiler de coches, seguros, todo eso va dentro de esa aplicación. Sí, vale. O sea que estamos sincronizados, por así decirlo, con los servicios tradicionales. Vale, sí. En otras palabras, no... y no reinventa la rueda, de quitar a gente de sus puestos de trabajo en sitios tradicionales, sino que simplemente os dedicáis a la infraestructura interna que tienen las cosas que este team. Tienen también su web donde puedes hacer booking, o sea que realmente tienen ambas partes, tanto la parte tradicional de las agencias de viaje como la parte moderna de hacer, de hacer un vuelo desde la web, desde una web. Pero en nuestro caso, nosotros nos enfocamos en la parte de agencias de viaje. Vale. Y ahora respecto a las normativas locales. Eh... Bueno, realmente, esto tiene mucho que ver con la pregunta de antes. Dado que operé en múltiples países, ¿cómo aseguráis que los requisitos de los software se ajusten a las diferentes normativas y regulaciones locales de cada región? Básicamente, lo que me has respondido antes y que esta pregunta casi que la podemos omitir. Sí, voy a añadir algo, que es que normalmente... O sea, cuando hay empresas tan grandes, normalmente hay un equipo de legal... que son los que se encargan de asegurarse de que se cumplen las normativas y las regulaciones y si hay algún cambio en la regulación que provoque cambios dentro del software, normalmente se crea una nueva fun... se requiere una nueva funcionalidad, ellos crean un nuevo ticket donde explican cuáles son los cambios y nosotros lo aplicamos en el software. Como hace poco tuvimos, por ejemplo, la nueva ley de protección de datos de Europa. que provocó que tuviésemos que hacer cambios bastante gordos dentro de la aplicación por el tema de los datos de clientes. Vale, entonces aparte de la individualidad que hay en cada país, de que el developer de cada país se encarga la normativa de cada país, además hay un equipo en general que se dedica a temas regulaciones, a decirle a cada equipo de developer, oye, esto no es una nueva regulación, tenéis que aplicarla. Y eso hablamos de temas legales, pero de temas de seguridad, nosotros por ejemplo tenemos auditorías cada seis meses de código donde se encargan de confirmar que las aplicaciones son seguras, de que no pueden venir a hacer un ataque de, no sé, inyectar SQL o cualquier tipo de cosa de ese estilo. Vale. Y ahora en relación a la implicación de las partes interesadas, ¿cómo se involucra a los stakeholders? A la hora de recopilar requisitos para el proyecto para asegurar que los requisitos... que los requisitos se ajustan a su expectativa. ¿Hay diferencia entre la implicación de los clientes internos y externos? Vaya, lo que me he dicho... También estaba medio respondido antes porque te has extendido bastante. Los tejoros se involucran por lo que no has dicho con las entrevistas. Lo hacéis como de tú a tú, no hay interferencia en vuestra comunicación porque estáis literalmente en persona o en llamada o en lo que corresponde. Ahora bien, lo de diferencia entre implicación de clientes interno y externo. La gente puede hablar de cliente interno, nosotros no trabajamos con aplicaciones externas, son todas aplicaciones internas dentro de la empresa. O sea, no tenemos una aplicación que vaya a utilizar directamente el cliente, por así decirlo. Son herramientas que utilizan agencias de viaje o conexiones con la web. Si alguien hace un booking, compra un vuelo desde la web directamente, se conecta con nosotros. Y los stakeholders, aparte de la toma de requisitos, una vez que el software se ha desarrollado, suelen hacer un testing, suelen probar la funcionalidad antes de desplegarla a clientes. Y vosotros también haremos testing, ¿no? Claro, nosotros hacemos, realmente, o sea, el proceso es el siguiente. Se toman los requisitos, se inicia el desarrollo. Una vez que el desarrollo esté terminado, nosotros hacemos un testing, se hace un code review. que lo hace siempre otro compañero que no haya estado involucrado en el desarrollo para ver que a nivel la calidad del código sea buena, que se cubran todos los casos y demás y una vez que ya se ha hecho un Code Review y se ha comprobado de que todo funciona respecto a lo que han pedido los clientes, los stakeholders, los stakeholders luego hacen otro testing y comprueban que la funcionalidad funciona. cómo debe ir, o sea, su expectativa. Y después de eso, pues se despliega a producción para que lo utilice la agencia de viaje o el cliente que lo vaya a utilizar. Vale, en fin, aparte de tomar requisitos, los stakeholders también hacen testing por sus partes. Sí, se involucran en casi todo el proceso. Vale. Ahora vamos a pasar a la parte de análisis, y a la siguiente parte de requisitos, comenzando por conflictos, conflictos entre requisitos. ¿Qué método utilizáis para gestionar los conflictos entre diferentes partes interesadas cuando existen diferencias en lo que consideran, bueno, en un requisito, sea más importante o menos importante, especialmente en lo más importante? Intentamos llegar, o sea, nos reunimos con ellos e intentamos llegar a un punto intermedio. Puede ser que haya un, que te pidan un requisito o una nueva funcionalidad que requiera mucho tiempo o que no sea viable directamente, entonces intentamos aportar... otras posibles soluciones hasta llegar a un punto intermedio por ambas partes. Hay una negociación. Lo que había dicho antes de que nada es que tenéis cliente interno. Entendemos como cliente interno a que tú trabajas para tuy y tuy ellos como que determinan cuáles son las necesidades que tienen los clientes y por ejemplo yo o Edu o Arthur o quien sea que vaya a... contratar algo que de tuy o ellos trabajan también con otra empresa? Vale es que hago la pregunta porque entonces no hay diferentes partes interesadas ni siquiera, la única parte interesada es tuy o hay más? La única parte interesada es tuy Los Stakeholders son compañeros de la empresa Vale y cuando cuando pueden surgir diferencias si solamente hay una parte interesada? Pues pueden surgir diferencias que la parte interesada venga con unos cambios dentro de una aplicación que sean inviables. Ah, vale. Que sean inviables, ya sean a nivel de seguridad o a nivel de funcionalidad. Por ponerte un caso, nosotros trabajamos principalmente con PHP, ¿vale? y puede venir alguien de seguridad y decir estáis utilizando una versión de PHP muy antigua que tiene problemas de seguridad. A lo mejor hacer un upgrade de la versión de PHP conlleva unos cambios de código que son muy grandes entonces intentamos llegar a un punto intermedio del estilo. Vale, ¿qué parte del código es la que te está preocupando que puede tener brechas de seguridad? Por ejemplo, una API. que sea un entripón de una API que hayan visto que haya una vulnerabilidad. Pues en vez de cambiar la versión de toda la aplicación, lo que hacemos es esa parte de código que es una API que a lo mejor lo que hace es conectarse a la base de datos y no haiga nada más, lo que hacemos es la sacamos fuera, la reescribimos en una nueva versión de PHP y la desplegamos. Vale. llegar a un punto intermedio. Vale, sí. Es lo que tiene más sentido, la verdad. Intuitivamente, a mí eso es lo que se me ocurre ir y hacer. Ahora, análisis de impacto y gestión de riesgos. ¿Realizar algún tipo de análisis de impacto antes de implementar cambios de requisitos? ¿Cómo se valúan los riesgos asociados a los requisitos en general, especialmente a los críticos? Vale, análisis de impacto te refiere a... entiendo que te refiere a cómo impactaría la nueva funcionalidad, por ejemplo. Sí, cómo... qué impacto tendría en el producto o en los cambios posterior al producto que se implementara el requisito este nuevo X. Pues eso normalmente lo hacemos durante la toma de requisito, es decir, cuando tenemos la refinement, durante la refinement nos encargamos de analizar todo ese tipo de cosas, de cómo ese cambio va a afectar a la aplicación. y qué problemas podemos tener en el futuro y cómo para solucionar esos posibles problemas. Vale, entonces, cuando hacen la entrevista, aparte de hacer la entrevista, también estáis como en paralelo pensando en los posibles riesgos que puede tener, que el requisito este simplemente en este sitio de esta forma, además con estos requisitos. Normalmente, antes de la entrevista, nos reunimos los desarrolladores para analizar ese tipo de cosas, ver los cuales son los riesgos, cómo solucionarlos y si vemos riesgos. ¿Qué? no se pueden solucionar, intentamos llegar, negociar con el cliente para buscar un punto intermedio para implementar la solución que ellos quieren pero sin afectar a largo plazo la aplicación o que pueda aparecer esos problemas. Vale. Pues perfecto, por salvarte. Ahora vamos con la especificación, es decir, documentar los requisitos de manera clara. Con respecto a la ambigüedad y la comprensibilidad por ambas partes. ¿Cómo gestionar los requisitos ambiguos o que pueden interpretarse de múltiples formas? ¿Qué método utilizáis para asegurar que los requisitos son comprensibles tanto para vosotros, los desarrolladores, como para los clientes? Si vemos que hay requisitos que pueden ser ambigües, por lo tanto, no es tan claro, lo que hacemos es reunirnos con los stakeholders. Para clarificar qué es lo que quieren exactamente, para que no haya ambigüedades antes del desarrollo de la funcionalidad. Ok, tiene mucho sentido también la forma en la que yo lo haría. En lo que le he sentido como me dice a Zed. Al final, la comunicación directa con los stakeholders creo que es la mejor forma de solucionar los problemas. Hombre, es la más rápida y la que probablemente lleve a menos malentendidos. Porque es lo que te he dicho antes del ping pong con el email. Si me comunico con ellos a través de email, a lo mejor cuando ellos me contesten, ellos... Me han dicho algo que hace que me surja otro problema y eso significa que yo envío otro email para esperar dos respuestas y al final estás haciendo ping pong con email un día entero, dos días, tres días, en lugar de reunirlo cinco minutos y terminar eso rápido. Además es que cuando hay tantas aplicaciones y tanta gente involucrada, el lenguaje de negocio, de cierta forma cambia dependiendo del equipo con el que estés trabajando. Me refiero a que, por ejemplo, una ficha de cliente, un equipo lo llama. Ficha de cliente, otra persona lo llama dossier, o a un booking lo llama ficha de no sé qué, y tal. Entonces, ese tipo de lenguaje tiene que estar claro para ambas partes. ¿A qué te refieres con ficha de cliente? ¿A qué te refieres con dossier? Para evitar ese tipo de problema. Sí, y lo que te he dicho antes también, lo que te acabo de decir... No hay un lenguaje de negocio estándar para toda la empresa. El hecho de que no haya un lenguaje de negocio estándar hace que la comunicación por email sea algo más difícil, porque ese tipo de cuestión es como dosier para ti significa lo mismo que para mí significa ficha de lo que sea, eso por email, hacerlo implica mandar otro email y seguir esperando. En una reunión esa pregunta se hace en dos segundos. Claro, por ejemplo dentro de... En un caso específico que me viene ahora a la mente es que lo que viene siendo un booking, un equipo lo llama record, otro equipo lo llama dossier y otro lo llama booking. Dependiendo de con quién está hablando va a utilizar un lenguaje de negocio diferente y a la hora de escribir los requisitos de esa funcionalidad cada equipo va a utilizar un lenguaje de negocio diferente. Entonces, cuando hay ese tipo de ambigüedades de que no está claro a qué se refiere Lo más rápido y lógico es reunirte con el cliente, con el stakeholder, clarificarlo todo, reflejarlo en los requisitos, y ya una vez que esté todo listo, empezamos en el desarrollo de la funcionalidad, o la aplicación, producto, lo que sea. Vale, y antes de empezar este desarrollo, ¿cómo os asegura que los requisitos son... completo y tienen la calidad que espera este holder, cómo comunicáis con este holder oye, esto es exactamente lo que quieres, estás 100% seguro de que esto es lo que quieres, sí, a partir de reuniones, pero hay un habrá un gap entre vuestro lenguaje como soledadero y vuestro entendimiento de lo que tenéis que hacer con lo que le tenéis que decir al cliente cómo gestionáis esa traducción, por así decir, para asegurar que la calidad es la que espera en ambas partes El primer filtro es el Product Owner, que es el que normalmente se suele reunir directamente con los Stateholders e intenta que el lenguaje de negocio... O sea, que todo esté claro. Pero si aún así hay duda... Reunión. Vaya, que el proceso que usáis para refinar y que deja algo grano es... Reunión, reunión, reunión, entrevista, reunión, entrevista, reunión. Si hay duda, reunión o comunicar... comunicarte directamente con el stakeholder. Vale. Es lo más rápido, lo más sencillo y... A mí me parece también muy intuitivo, sentido común, lo más directo, lo más rápido, lo más sencillo y la verdad que es que la mitad de lo que estamos haciendo se están respondiendo con reunión barra entrevista, pero es que es verdad que es lo que dice, es la forma más rápida. No tendría sentido en este caso usar otro método y siempre considerando también que el stakeholder está a mano. que no es... porque yo supongo que si el Steam Holder no estuviese tan implicado en el desarrollo pues no se podría... no podría haber reunión, reunión, reunión cada vez que tuviese un problema Sí, sí Es que incluso comunicación directa vía chat suele siempre... O sea, la gente suele estar ocupada, a lo mejor te tardan en responder el mensaje un día, tres horas, dependiendo Entonces lo más directo es... reunión en el calendario, te reúnes 15 minutos con ellos, solucionas las dudas y continúas con el trabajo. Sí, la verdad que... El no más rap, pero más sencillo. Es lo que yo he visto todo este rato, lo que él se me ha dicho que haces. En algún momento habrá pasado que no haya sido tan fácil lo de concertar una reunión. ¿Ha bajado la calidad del producto por culpa de eso? Sí, incluso yo he tenido caso de estar desarrollando una aplicación y que los cambios de requerimiento llegasen a cambiar cada tres horas. porque la persona que estaba tomando los requisitos, o sea, el stakeholder de la aplicación, no estaba haciendo su trabajo correctamente. Yo he llegado a tener casos de... Vale, en ese caso fue una aplicación de temas de seguro de viaje. De crear export de todos los seguros de viaje que estaban dentro de la aplicación y demás, entonces eso requiere unos datos muy específicos que iban a ser mandados a otra aplicación para que los procesase. ¿Qué pasa? Yo escribía una estructura en base a lo que me daba el stakeholder y me decía, uy, pero en realidad, en vez de este dato, quiero que sea esta estructura. Hago el cambio, lo pongo a la estructura que él me pide, le mando el fichero de nuevo, 20 minutos más tarde. Mira que mejor la estructura de antes y así durante día y día y día. porque no se ha hecho una toma de requisitos correcta durante el desarrollo. Y al final eso es pérdida de tiempo. Y de dinero de la empresa. Porque al final imagino que el presupuesto está al principio, ¿no? No, nosotros no trabajamos... Como trabajamos directamente con Tuna en un presupuesto en sí para la aplicación, normalmente trabajamos con tiempo. Vale. Normalmente no tenemos Relay. Pero... ¿Perdón? Habías hablado de que habías trabajado en otra empresa, ¿no te ha pasado algo parecido en la otra empresa? Realmente que yo recuerdo dentro de la anterior empresa, trabajábamos con Scrum y se hacían mucho, trabajaban muy bien los requisitos antes de empezar en el desarrollo y aún así, obviamente, ha habido problemas también. de que se han tomado los requisitos, se ha hecho la funcionalidad, hemos llegado a la demo y el Stakeholder ha dicho ah, pero eso no lo queríamos así. por lo tanto, nuevos cambios dentro de la funcionalidad porque los requisitos no se han tomado bien o el Stjordel ha cambiado de opinión en el último momento. Ahora vamos a pasar a la siguiente parte de TNR, aunque estoy leyendo las preguntas y en función de las respuestas que has dado ya están prácticamente respondidas. La primera de validación y verificación es sobre validación y prototipado. ¿Qué técnicas usáis para validar y verificar los requisitos con la parte interesada? Ya me la respondí antes. Entrevista, esto es lo que queréis. ¿Utilizáis técnicas de prototipado u otro tipo de técnica más específica? Esto me ha respondido y no me ha respondido a mi porque has dicho que no solo hay usado el producto de DIPADO, pero yo intuyo que vosotros cuando hacéis el desarrollo no partís desde cero y ya entregáis un producto final. ¿Hacéis eso o hay como versiones v.0, v.1 que se van enseñando para que los estejores me den diciendo vale esto es lo que quiero o no cambia? de cosas, lo que normalmente hacemos es... O sea, tenemos la lista de las funcionalidades mínimas que a lo mejor necesita... Vamos trabajando con iteraciones. Entonces, a lo mejor decimos... ¿Qué es lo que necesitamos? ¿Qué es lo mínimo que necesitamos para... O sea, lo que vendría siendo el producto mínimo viable. ¿Qué es lo mínimo que necesitamos ahora mismo? Una vez que tenemos eso desarrollado, se lo enseñamos al cliente. Quedan el OK. Pues lo desplegamos, eso sería a lo mejor la beta. O una alfa. Seguimos desarrollando y una vez que ya tenemos el producto completo, lo desplegamos o vamos desplegándolo por parte? No sé si eso responde a tu pregunta. Sí, responde a mi pregunta. Básicamente usáis de cierto modo técnicas de prototipado. Cada vez que termina una integración, lo que he dicho, el producto mínimo viable. Sí, vamos iterando, sí. Vale, sí. Era lo que esperaba, lo que esperaba. En cuanto a la determinación del éxito, ¿cómo determináis que lo que habéis hecho o el proyecto ha sido exitoso? También me has respondido delante, aparte de que parte de la respuesta es reunión, está bien, está mal. También nos has dicho que los stakeholders hacen testing, así que sumo que si pasa el testing de los stakeholders, significa que... El proyecto ha sido exitoso cuando se despliega en producción y lo están usando los clientes y no hay problemas. Vaya que los clientes son testers de alguna forma también. No, a ver, normalmente no se llega a ese punto, pero siempre cuando trabajas con diferentes servidores y demás, siempre puede haber algún problema con un servidor en producción y que haga que la aplicación crache o que la aplicación no funcione, entonces hasta que el producto no está en producción. y vemos que, normalmente cuando se hace un despliegue a producción, los stakeholders, aparte de haberlo testado en el entorno de testing, lo testen también en el entorno de producción. Y una vez que ha pasado ese testing en producción, ya podemos decir que el proyecto ha sido exitoso. Vale, entonces, posiblemente, si pasa todas las barreras de testing, el software es lo que se esperaba, y se asume que los exitos han cumplido. Si funciona, está bien. Jajaja, también bastante intuitivo la verdad Vale, y ahora con la última parte de los procesos de ingeniería y de requisitos, la gestión de cambio. Empezando por el cumplimiento de los requisitos no funcionales. Cómo se asegura que los requisitos no funcionales se han cumplido a lo largo de ese rollo. Es decir, que cuando habéis terminado, todo lo que no funcionan, rollo escalabilidad, rendimiento, idioma... Obviamente yo sumo que tú sabes que los requisitos no funcionan. Pero bueno. ¿Cómo decís? Está bien, está mal. Porque eso no es tan directo como testear a un funcionamiento por clientes. Es más... Tema de performance y, por ejemplo, esperamos que esa aplicación vaya a estar recibiendo un montón de requests, una API. Normalmente hacemos test de carga antes de desplegarlo. Entonces comprobamos que esa aplicación va a aguantar cierto volumen. Escalabilidad no tenemos en sí porque trabajamos con servidores físicos, entonces no tenemos la posibilidad de escalarlo, no es como trabajar en la nube. Tenemos también alguna aplicación en AWS desplegada y ahí la escalabilidad se comprueba de que cuando hay cierto volumen de carga se despliega otra instancia aparte de la que hay principal para que procese los datos. Voy a ponerte un caso. Luego, el tema de calidad del código y demás. Para eso tenemos las Code Review para asegurar que el código que se está desplegando tiene buena calidad. Test-in dependiendo de la aplicación que sea, tenemos test unitario y test funcionales, que eso también añade, o sea, es parte de los requerimientos no funcionales de que el código tenga su... esté cubierto por test. Sí. Al final, eso está directamente relacionado con rendimiento y seguridad, cierto, modo. Vale. Pues la siguiente pregunta está en relación a la priorización de los requisitos. Cuando tenéis que priorizar, es decir, poner uno encima de otro, ¿cómo afectan estas priorizaciones en vuestra empresa? ¿Cómo determináis qué es más importante que otra cosa y qué hacéis con esa cosa que dejáis de lado? En el tema de priorización de requisitos, esa es una decisión que suele tomar el Product Owner, que se encarga de priorizar, que es lo más importante de la aplicación. O sea que eso parte, por así decirlo, de negocios, no es algo que esté en nuestro poder, por así decirlo, como desarrolladores, en nuestra empresa. Vale. O sea, a la hora de priorizar qué funcionalidad es más importante que la otra, eso es algo que suele hacer Delegamos en el Product Owner. Ok, tiene sentido para algo que tiene que existir el Protobunner Ahora, en relación a los cambios en los requisitos y la área de negocio ¿Cómo gestionáis los cambios en los requisitos? En los proyectos en los que requieren la coordinación de múltiples áreas que en este caso es prácticamente del todo como hoteles, cruceo de oro, línea crecionamos los cambios de requisitos. Normalmente si hay un cambio de requisitos durante el desarrollo, analizamos qué es lo que necesitamos cambiar dentro de la aplicación y aplicamos los cambios. No hay mucha... Vale, y en relación a lo de coordinación de múltiples áreas, como vosotros, como he dicho antes, trabajáis en segmentados por países. la coordinación múltipla y área casi como si nos hicieran no Vale, pues ahora con la herramienta de gestión de requisitos. ¿Qué herramientas usáis para la gestión de requisitos? Es decir, para organizarlo, adaptarlo, priorizarlo... ¿Tenéis algo en especial que os ha podido hacer sobresalir sobre lo demás? Especial que haga sobresalir de otras empresas, no. Nosotros herramientas que utilizamos para el tema de requisitos de software utilizamos Jira, que es básicamente el estándar del sector. O sea que no hay mucha diferencia con otra empresa. ¿Qué es Jira o cómo funciona? Porque yo no tengo ni idea. Jira es una aplicación para eso, para organizar el desarrollo de software. Va funcionando con... funciona con ticket. O sea, cada proyecto tiene su board con diferentes partes, en plan, to do, en desarrollo, en code review, tiene columnas. No sé si había utilizado Trello, por ejemplo. Sí, eso te iba a decir ahora que sí se parece a Trello. Es como el Trello pero con superpoderes. Un poco más complejo, pero básicamente es lo mismo. Vale, sí, es que nosotros hemos usado Trello y, literalmente, lo único que no sabemos es para gestionar requisitos. Es que cuando empezás a decir, columnas, board, todo masonado Trello. Exactamente lo mismo, un board con las columnas, con los tickets, que tienen los requerimientos de desarrollo y dependiendo de en qué fase esté, pues se va moviendo. Vale, sí, entonces es prácticamente lo mismo que el Trello. Lo que pasa es que, como tú has dicho, tendrá Colosina para que esté machetado. golosinas, temas de linkar tiquetes o funcionalidades entre diferentes boards, por ejemplo, si hay múltiples equipos trabajando en la misma funcionalidad, pues si tú entras dentro del ticket de tu equipo, tienes un link directo al ticket del otro equipo, por lo tanto puedes ver en qué punto del desarrollo está el otro equipo sin tener que meterte en el otro board, buscar el ticket, que eso tiene sus códigos y demás. esto es un poco más cómodo que Trello. O incluso, quizás lo mejor Trello tiene la misma funcionalidad, no lo sé. La verdad yo tampoco lo sé. Si lo supieras te lo diría, pero no tengo ni idea de si el Trello tiene eso. Bueno, trazabilidad de requisito. ¿Cómo gestionar la trazabilidad? Hablo del ciclo de vida del proyecto. Vaya, mmm... Sí, ¿qué cómo hacer la trazabilidad? No hay ninguna pregunta más. fue. Pues... no sé... No sé... ¿El qué? ¿No tienes muy claro lo que tienes que responder? ¿No tienes muy clara la pregunta? No, no tengo muy claro, o sea... Los requisitos se toman a lo largo del ciclo de vida del proyecto. Pues... Creo que un poco lo mismo de siempre. Se toman los requisitos... Si hay cualquier tema, entrevista. Vale. No, pero a ver, lo que hacemos es... Una vez que se toman los requisitos... se clarifica todo lo de la nueva funcionalidad, se inicia el desarrollo. Si hay cambios dentro de los requisitos, se aplican, si son fachibles, si no, pues... Si son cosas que son necesarias para la primera iteración, pues se aplican si vemos que es un requisito que no es obligatorio, lo que hacemos es desplegamos el código en producción y en la siguiente iteración aplicamos los nuevos requisitos. Dependiendo de la prioridad que tenga. Si es algo muy necesario, se aplica en el momento, durante la primera iteración. Si vemos que es un cambio estético, algo que realmente no va a influir en la funcionalidad, lo posponemos. Vaya, que la adaptabilidad está directamente relacionada con reuniones, que es con lo que está relacionado todo lo que hemos dicho hasta ahora, y con la priorización. Sí. Y la última pregunta de gestión de cambios. A medida que los proyectos avanzan, ¿cómo se adapta el equipo de desarrollo a la evolución de los requisitos? ¿Tenéis algún mecanismo formal? No voy a tener mecanismo formal, no creo, vaya. Para ajustar el alcance del proyecto sin comprometer la fecha de entrega. Nosotros realmente no tenemos casi fechas de entrega. Es muy raro que en un proyecto tengamos una fecha límite de entrega. Y si vemos que hay, a lo mejor, no sé, durante el desarrollo, que hay algún cambio o un nuevo requisito que pueda comprometer la fecha de entrega, pues a lo mejor lo que hacemos es, dentro de la lista de requisitos, vemos cuál es el que a lo mejor es algo estético o algo que no tiene prioridad y lo eliminamos para llegar a la fecha de entrega. Bueno, y esa eliminación supongo que la hablaré antes con... Claro, hablamos con los stakeholders y decimos, ¿cuáles son los que se encargan de priorizar? Y decimos, vale, si queréis este nuevo desarrollo, este nuevo requisito, tenemos que sacrificar uno de la lista. ¿Cuál es el que podéis sacrificar? Para hacerlo en la próxima iteración. O sea, que al final, otra vez, reunión. Sí, es que... Segará un consenso y seguir con el desarrollo. Llevamos 21 preguntas. Y ahora que lo estamos haciendo, me estoy dando cuenta que aparte de que la respuesta para el 90% es reunión, hay muchas que prácticamente sobrarían porque su respuesta es reunión y porque tienen relación mucho con algunas de las que hemos hecho anteriormente. Pero bueno, en pocas palabras, la evolución se negocia, se hace una reunión... Y ya está, y se ajusta... Obviamente si metes más trabajo tienes que quitar otro lado. Claro. Pues... pues ya está. Y la última parte que no entra en ninguna categoría de ingenieros y requisitos, pero son preguntas así un poco... genéricas sobre cosas relacionadas con ingenieros y requisitos, pero que no caen dentro de ninguna parte de la misma. Empezamos con herramientas usadas en el día a día. ¿Qué herramienta usas en tu día a día como desarrollador? en general no relacionado con Ingenier Requisitos, sino en general, obviamente también relacionado con Ingenier Requisitos, pero... Pues herramienta, el IDE, en nuestro caso utilizamos, bueno... PHP Storm o... No sé si conocéis IntelliJ IntelliJ sí, pero IntelliJ tiene también por PHP Tiene para PHP, tiene para todo, para PHP, Golang, Java, Python, Ruby... Es que como en cada... Por ejemplo en Python se llama Python El de Java, como no me acuerdo que se llamaba. IntelliJ. Ah, claro, que todo es de JetBrains. JetBrains, el de GoLand es GoLand y el de PHP es PHPStorm. Yo utilizo el de PHPStorm, IntelliJ, el de Java y el de GoLand. Principalmente, son los tres que utilizo. Bueno, y el Datagrip que es el de base de datos. Son las tres herramientas que suelo utilizar más diariamente. Y el de la ingeniería, si tú lo que me has dicho antes, es que su preferes traerlo con eso, Gira, que no me salía ahora mismo. Ok. Gira y luego temas de pipeline. Utilizamos GitLab para el tema de control de versiones de software. Que eso es como GitHub pero interno en la empresa. Exactamente. Y temas de pipeline de despliegue y ese tipo de cosas utilizamos Jenkins y GitLab Pipelines. Que es básicamente otra funcionalidad que trae GitLab internamente. O sea que eso es principalmente las herramientas que utilizamos. Perfecto. En relación a la seguridad de los datos. Teniendo en cuenta que tenéis fecha de datos, muchísimos datos, tenéis muchísimos usuarios, porque supongo que manejaréis muchísimos datos. ¿Cómo aseguráis que los datos son seguros para la redundancia durante el desarrollo? ¿Y cómo protegéis los datos de los clientes? Yo intuyo que la respuesta ya ha sido... casi todas antes con lo de la auditoría para ver que hay vuestro código seguro. La auditoría y un equipo de seguridad dentro de la empresa que se encarga internamente, aparte de la auditoría externa, de comprobar las brechas de seguridad de las aplicaciones. Hay otro equipo de IT que se encarga de que los servidores sean seguros y luego nosotros tenemos ciertas medidas, temas de anonimización de datos y demás en las bases de datos. ¿Use algún tipo de cifrado en especial? Aparte de los que incorporan los protocolos SSL y tal. Básicamente eso es lo que utilizamos. Respecto a la sostenibilidad, esta pregunta no estoy yo muy convencido de la respuesta que me va a dar porque no sé yo, por fuera la empresa pintará como que sostenible pero yo no sé si esto se traducirá en algo dentro de la empresa, pero bueno para eso están estas preguntas La sostenibilidad es la clave en la cultura de TUI ¿Cómo se traducen estos valores de los revisitos no funcionar dentro de desarrollo? ¿Consideráis aspectos como eficiencia energética o reducción de la huella de carbón en el desarrollo de vuestro sistema? Eh... sinceramente no lo tenemos en cuenta Es que la verdad que esta pregunta me parece un poco en plan... ¿Optimizáis el código para que el servidor tarde 0.0 5 segundos menos para emitir 0.0? Me pregunto si sube. Sí, un poquito se sube. Vamos a re-escribir el código de PHP a AC porque tiene mejor eficiencia energética. Y imagínate que... Es sarcasma, es broma. Ya sé que es sarcasma, pero imagínate que te lo ponen de verdad. Que viene el protobueno y te dice, oye, ¿no han pedido que... Que paséis todo el código a AC, a ensamblado? por una cuestión de definiciones que digas. Si me pagan... Si te pagan tú lo haces, tú eres mercenario. Si me pagan como desarrollador de C yo lo hago. Vale. Pues la última, bueno no la última no, no es la última, es la antepenúltima de consideraciones adicionales, IA generativa. Sabes que la IA está muy de modo últimamente. Usáis IAs en vuestro día a día como ingenieros que existo, es decir, HGPT, Copilot, Bing, Cloud, cualquiera de esas Sí, la empresa nos provee cuenta de Copilot de empresa o sea que es privado y sí, yo estoy empezando a utilizarla ahora para el tema de desarrollo de software Copilot privado, ¿a qué te refieres? ¿a que corren un servidor puestos o qué? Que se supone que los datos no los pueden utilizar dentro de Microsoft para entrenar la IA por así decirlo. Supongo que será un plan distinto para empresas de almacenero. Un plan distinto de pago de Copilot. Al final están trabajando con datos que son confidenciales, entonces no puede Microsoft tener acceso a ellos. Supongo que correrán servidores diferentes, no sé cómo lo hacen, pero es cuenta privada y se supone que los datos están seguros ahí. y yo lo he estado utilizando para desarrollo de software y la verdad que es bastante cómodo para... no sé... Hace la semana pasada lo estoy utilizando para mapear un XML en código y me ahorró a lo mejor tres o cuatro horas de trabajo en cinco minutos. o sea que es bastante cómodo en relación a ingeniería de requisitos no hay nada u... no dentro de ingeniería de requisitos no utilizamos chat gpt vale supongo que eso es bueno de cierto modo el chat gpt no puede hacer meeting todavía todavía ya puede hablar por teléfono contigo ya está un pasito más cerca casi no vamos a quedar sin trabajo ya mismo en vez de ir vosotros a hacer la reunión mandáis a chat gpt O sea, es potente pero tampoco está de todo fino a la hora de desarrollar código. Comete errores. Parece una I. Comete abachantes errores. Bueno, integración de sistemas de terceros. ¿Cómo gestionáis la integración de sistemas de terceros? Como sistema de reserva aérea o plataforma de pago dentro de vuestro ecosistema digital. Vale, integraros con terceros, no sé exactamente con qué terceros trabaja tú y o si siguiera trabaja con terceros, pero si vuestra plataforma está en algún medio, ¿cómo implementáis...? Comunicación con sistemas de terceros normalmente son API. ¿Y podés poner algún ejemplo? o exponerte... a ver, dentro de mi equipo son todas comunicaciones internas, por lo tanto no trabajamos con así... por así decirlo, con terceros, pero por ejemplo, te puedo poner caso de una conexión que tenemos... que sí tenemos con un sistema de terceros, que es la aerolínea de Lufthansa, y ahí lo que utilizamos es API. Vale, y con plataformas de pago, yo que lo mismo, ¿no? Con plataformas de pago, creo que... es un sistema legacy, no sé exactamente cómo funciona, pero creo que no era con APIs, que utilizaban servidores FTP donde envían un export al día con todos los datos y ellos se encargan de procesarlo. Plán, forma antigua antes de que se hicieran las APIs, de que se empezaran a utilizar las APIs como estándar en la industria. Pero creo que estaban ahora viendo cómo cambiarlo y empezar a utilizar... sistemas modernos. A mí lo del Legacy eso me pilla... no sé yo... Sistemas Legacy son aplicaciones muy antiguas que quizás tengan a lo mejor 15, 20 años, 30 años. Por eso me pillan muy lejos, tienen años que yo. Sí, a ver, cuando empecéis a trabajar en una empresa de software, si entráis en una empresa relativamente con años de bagaje, lo más seguro es que a lo mejor os toca una aplicación Legacy. Pues sí. No, supongo que eso será un problema de los derechos de futuro. Dependiendo del buecho de futuro, que no tiene nada de malo. Simplemente es distinto, y tuyo. Sí, es distinto. Al final estás trabajando con código que a lo mejor han estado trabajando 15 personas, 20 personas, y tienes que entender cómo esa gente programa. Que eso también son otros temas. Pero que... En su historia. Son otros temas que caen fuera de la ingeniería de requisitos, así que no lo vamos a hablar ahora. Y la última de consideraciones adicionales sobre la gestión del feedback y el mantenimiento. ¿Cómo gestionáis el feedback de los clientes después de haber entregado el producto y hacéis mantenimiento? Mantenimiento siempre. ¿Siempre cómo? Aunque el producto esté ya en producción, siempre suelen venir nuevos cambios, nuevas funcionalidades que hay que mantenerlas. O sea, que te refieres con mantenimiento. No es mantenimiento como tal, sino que simplemente os llegan como un nuevo requisito que tenéis que implementar, pero lo que hacéis no... A ver, que en principio es software, ¿no? Generalmente como tú haces un programa, ese programa no requiere tu participación activa para que funcione. Entonces, más que mantenimiento, lo que hacéis es escalarlo en función de lo que os llegue, ¿no? Sí, básicamente. ¿Y la gestión del feedback? supongo que eso también tiene mucha relación con el testing y lo que te he dicho antes de que el último testeo es del cliente ya tocando el producto final. Si el feedback positivo después del último paso podemos concluir de que el producto ha sido exitoso, si el feedback bueno, si el feedback malo pues a lo mejor tenemos que generar nuevos tickets y nuevas funcionalidades para el producto para solucionar el problema que ha encontrado el... o sea el feedback, el más feedback del cliente, por así decirlo. En resumen, si hay buen feedback, Sans se acabó. Todo bien. Y si hay más feedback, pues volvemos a gestionar cambios, meter requisitos, a volver paso a atrás. Dentro del mantenimiento, una vez que la aplicación ha sido desplegada en producción, es decir, que la está utilizando el cliente, nosotros somos los dueños de la aplicación y tenemos que estar seguros de que la aplicación sigue funcionando, que no es un despliego inolvidos de la aplicación. para siempre. Sí, sí, ya. Y esa aplicación es nuestra responsabilidad de que esté funcionando siempre. Ok, pues ya hemos abordado todas las preguntas que teníamos apuntadas, considerando que hemos terminado, ¿crees que falta algún aspecto práctico que no hayamos abordado y debemos mencionar? o ¿crees que está todo más o menos cubierto? Yo creo que está claro todo. Pues entonces, poco más. Ya se acabó creo yo. Te voy a hacer una pregunta. Tú has dicho que la mayoría de cosas con problemas se resuelven con reuniones, ¿no? Un segundo que te suba el volumen porque te escucho super bajo. Ahora. Eso, que tú has dicho que la mayoría de problemas se solucionan con reuniones, ¿no? Sí. Si una reunión no se puede llevar a cabo a corto plazo, si el stickholder te dice pues hasta dentro de tres días no puedo reunirme. En ese tiempo, ¿tenéis que dejar todo parado o podéis hacer algo? Tenemos si... el problema bloquea el resto del desarrollo de la aplicación, esa funcionalidad se bloquea hasta que el stakeholder solucione el problema, o sea, no solucione la duda, por así decirlo. O sea, si el stakeholder es la persona interesada en solucionar esa, o sea, es la persona más interesada en desplegar esa nueva funcionalidad, si esa persona te dice... te espera seis días, no está tan interesado en solucionar el problema, o no tiene tanta prioridad, por lo tanto, se bloquea. Cuando realmente el stakeholder, o sea, tú le vas a un stakeholder y le dices, tenemos este problema, necesitamos reunirnos. Si esa persona, si ese ticket o esa funcionalidad es prioritaria, esa persona va a encontrar tiempo para reunirse contigo cinco minutos y solucionar el problema. Y el problema es bloqueante, se bloquea el ticket hasta que ellos lo solucionan. Si podemos continuar con el desarrollo, se continúa y cuando se pueda resolver la duda se resuelve y listo. Depende del tipo de problema. ¿Te ha pasado alguna vez que venga a quedar un problema bloqueante, no os podéis reunir y tengáis que estar parados? Muchísimas veces. ¿Y en ese tiempo qué hacéis? ¿Dedicar el tiempo a otro proyecto? O otra funcionalidad dentro de la misma aplicación. o sea, tú al final tienes tu board con todos los tickets ordenados por prioridades y si tú estás trabajando en un ticket, que por lo que sea, no puedes continuar trabajando porque tienes un bloqueante o por ejemplo, tienes ya el código desarrollado pero tienes un bloqueo de servidor y está esperando que la gente de Sistema haga un cambio en el servidor que necesita. Ahí ya la responsabilidad no está, o sea, digamos que la bola no está entutejada. porque tienes que esperar que la otra persona termine su ticket o su funcionalidad o te resuelva el problema. Lo que suele hacer es escribir un comentario mencionando al stakeholder, a tu product owner, explicando cuál es el problema, que ahora mismo está el ticket bloqueado, bloqueas el ticket, le pones un flag y coges el siguiente ticket de la lista de prioridades y empieza a trabajar en el otro ticket hasta que se solucione lo que te está bloqueando, ya sea temas de sistema, de base de datos... de cosas que no están claras con el stakeholder y estás esperando a que te comunique con él, lo que sea, bloquea y es al siguiente ticket. Y, dudo que te haya pasado alguna vez, pero ¿te ha pasado alguna vez que eh... ha bloqueado un ticket porque no podías seguir, porque necesitabais reunirlo y no había un siguiente ticket que coges? No, siempre... tenemos muchísimo trabajo, nunca hemos tenido ese... ese caso nos ha dado. Ok. Pues, por mi parte, nada más. ¿Tenían una pregunta, Eduardo? No, por mi parte también. Pues canela. Pues entonces, Mocemino. Voy a detener la grabación, porque ya...